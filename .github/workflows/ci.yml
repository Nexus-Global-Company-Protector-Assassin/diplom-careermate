name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  # ==========================================
  # Lint & Type Check
  # ==========================================
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm ci --workspace=frontend
          npm ci --workspace=backend

      - name: Run ESLint (Frontend)
        run: npm run lint --workspace=frontend

      - name: Run ESLint (Backend)
        run: npm run lint --workspace=backend

      - name: Type check (Frontend)
        run: npm run type-check --workspace=frontend

      - name: Type check (Backend)
        run: npm run build --workspace=backend

  # ==========================================
  # Unit Tests
  # ==========================================
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --workspace=frontend

      - name: Run tests
        run: npm run test:ci --workspace=frontend

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: careermate_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --workspace=backend

      - name: Generate Prisma Client
        run: npx prisma generate
        working-directory: ./backend

      - name: Run migrations
        run: npx prisma migrate deploy
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/careermate_test

      - name: Run tests
        run: npm run test:cov --workspace=backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/careermate_test
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info
          flags: backend

  # ==========================================
  # E2E Tests
  # ==========================================
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm ci --workspace=frontend
          npm ci --workspace=backend

      - name: Install Playwright
        run: npx playwright install --with-deps
        working-directory: ./frontend

      - name: Start services
        run: |
          docker-compose -f devops/docker/docker-compose.dev.yml up -d
          sleep 30

      - name: Run E2E tests
        run: npm run test:e2e --workspace=frontend

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  # ==========================================
  # Security Scan
  # ==========================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: |
          npm audit --audit-level=high --workspace=frontend || true
          npm audit --audit-level=high --workspace=backend || true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # ==========================================
  # Build Docker Images
  # ==========================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test-frontend, test-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./devops/docker/Dockerfile.frontend
          push: false
          tags: careermate-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./devops/docker/Dockerfile.backend
          push: false
          tags: careermate-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
