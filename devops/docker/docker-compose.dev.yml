version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: careermate-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-careermate}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-careermate_dev_pass}
      POSTGRES_DB: ${POSTGRES_DB:-careermate_dev}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-careermate}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - careermate-network

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: careermate-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-careermate_redis_pass}
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - careermate-network

  # PgAdmin (Optional - для разработки)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: careermate-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@careermate.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_LISTEN_PORT: 80
    ports:
      - '${PGADMIN_PORT:-5050}:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - careermate-network
    profiles:
      - dev

  # Redis Commander (Optional - для разработки)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: careermate-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-careermate_redis_pass}
    ports:
      - '${REDIS_COMMANDER_PORT:-8081}:8081'
    depends_on:
      - redis
    networks:
      - careermate-network
    profiles:
      - dev

  # MinIO (S3-compatible storage для локальной разработки)
  minio:
    image: minio/minio:latest
    container_name: careermate-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - '${MINIO_PORT:-9000}:9000'
      - '${MINIO_CONSOLE_PORT:-9001}:9001'
    volumes:
      - minio_data:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - careermate-network
    profiles:
      - dev

  # Mailhog (Email testing для локальной разработки)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: careermate-mailhog
    restart: unless-stopped
    ports:
      - '${MAILHOG_SMTP_PORT:-1025}:1025'  # SMTP
      - '${MAILHOG_UI_PORT:-8025}:8025'    # Web UI
    networks:
      - careermate-network
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  minio_data:
    driver: local

networks:
  careermate-network:
    driver: bridge
